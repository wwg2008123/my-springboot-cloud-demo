server:
  port: 9001
#  servlet:
#    context-path: /wwg
datasource:
  readSize: 1
spring:
  application:
    name: service-demo
  #  zipkin:
  #    base-url: http://localhost:9999
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    master:
      url: jdbc:mysql://192.168.65.130:3306/test?useUnicode=true&amp;characterEncoding=utf-8&amp;autoReconnect=true&zeroDateTimeBehavior=convertToNull&allowMultiQueries=true&pinGlobalTxToPhysicalConnection=true
      username: root
      password: 123456
      # 下面为连接池的补充设置，应用到上面所有数据源中
      # 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
      initialSize: 10
      # 最小连接池数量
      minIdle: 5
      # 最大连接池数量
      maxActive: 50
      # 获取连接时最大等待时间，单位毫秒。
      # 配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
      maxWait:  60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      timeBetweenEvictionRunsMillis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      minEvictableIdleTimeMillis: 300000
      # 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用
      validationQuery: SELECT 1 FROM DUAL
      # 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      testWhileIdle: true
      # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
      testOnBorrow: false
      # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
      testOnReturn: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      poolPreparedStatements: true
      maxPoolPreparedStatementPerConnectionSize: 20
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      filters: stat,wall,log4j
      # 去掉'wall'，这样你的SQL加入注释等信息，不会检查出错
      #    filters: stat,log4j
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
      # druid servlet
      urlMappings: /druid/*

    slave:
      url: jdbc:mysql://192.168.65.132:3306/test?useUnicode=true&amp;characterEncoding=utf-8&amp;autoReconnect=true&zeroDateTimeBehavior=convertToNull&allowMultiQueries=true&pinGlobalTxToPhysicalConnection=true
      username: root
      password: 123456
      # 下面为连接池的补充设置，应用到上面所有数据源中
      # 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
      initialSize: 10
      # 最小连接池数量
      minIdle: 5
      # 最大连接池数量
      maxActive: 50
      # 获取连接时最大等待时间，单位毫秒。
      # 配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
      maxWait:  60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      timeBetweenEvictionRunsMillis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      minEvictableIdleTimeMillis: 300000
      # 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用
      validationQuery: SELECT 1 FROM DUAL
      # 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      testWhileIdle: true
      # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
      testOnBorrow: false
      # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
      testOnReturn: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      poolPreparedStatements: true
      maxPoolPreparedStatementPerConnectionSize: 20
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      filters: stat,wall,log4j
      # 去掉'wall'，这样你的SQL加入注释等信息，不会检查出错
      #    filters: stat,log4j
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
      # druid servlet
      urlMappings: /druid/*
  devtools:
    restart:
      enabled: true   #热部署生效
      additional-paths: src/maiin/java  #设置重启的目录
      additional-exclude: WEB-INF/**    #classpath目录下的WEB-INF文件夹内容修改不重启
#  rabbitmq:
#    host: 192.168.65.130
#    port: 5672
#    username: admin
#    password: 123456


druid:
  init:
    prefix: /druid/*
    allow: 127.0.0.1
    deny:
    loginUsername: root
    loginPassword: 123456
    resetEnable: false
---
redis:
  maxIdle: 10
  maxTotal: 1000
  maxWait: 30000
  intanceUrlList:
  - 192.168.65.130:7000
  - 192.168.65.130:7001
  - 192.168.65.130:7002
  - 192.168.65.132:7003
  - 192.168.65.132:7004
  - 192.168.65.132:7005
---

eureka:
  #  instance:
  #    prefer-ip-address: true
  #    ip-address: 172.16.3.159
  client:
    service-url:
      defaultZone: http://localhost:8001/eureka/

# 打印出mybaties的sql语句以及参数列表
logging:
  level:
    com:
      wwg:
        servicedemo01:
          mapper: DEBUG

